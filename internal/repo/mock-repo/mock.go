// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/init.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/sharkx018/billing-engine/internal/entity"
	store "github.com/sharkx018/billing-engine/internal/store"
)

// MockResourceRepo is a mock of ResourceRepo interface.
type MockResourceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockResourceRepoMockRecorder
}

// MockResourceRepoMockRecorder is the mock recorder for MockResourceRepo.
type MockResourceRepoMockRecorder struct {
	mock *MockResourceRepo
}

// NewMockResourceRepo creates a new mock instance.
func NewMockResourceRepo(ctrl *gomock.Controller) *MockResourceRepo {
	mock := &MockResourceRepo{ctrl: ctrl}
	mock.recorder = &MockResourceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceRepo) EXPECT() *MockResourceRepoMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockResourceRepo) CreateLoan(ctx context.Context, id int, payload entity.CreateLoadRequestPayload) (store.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, id, payload)
	ret0, _ := ret[0].(store.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockResourceRepoMockRecorder) CreateLoan(ctx, id, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockResourceRepo)(nil).CreateLoan), ctx, id, payload)
}

// GetLoanById mocks base method.
func (m *MockResourceRepo) GetLoanById(ctx context.Context, loanID int) (store.Loan, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanById", ctx, loanID)
	ret0, _ := ret[0].(store.Loan)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLoanById indicates an expected call of GetLoanById.
func (mr *MockResourceRepoMockRecorder) GetLoanById(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanById", reflect.TypeOf((*MockResourceRepo)(nil).GetLoanById), ctx, loanID)
}

// GetLoanByUserId mocks base method.
func (m *MockResourceRepo) GetLoanByUserId(ctx context.Context, userID int) ([]store.Loan, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByUserId", ctx, userID)
	ret0, _ := ret[0].([]store.Loan)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLoanByUserId indicates an expected call of GetLoanByUserId.
func (mr *MockResourceRepoMockRecorder) GetLoanByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByUserId", reflect.TypeOf((*MockResourceRepo)(nil).GetLoanByUserId), ctx, userID)
}

// GetUserByMobile mocks base method.
func (m *MockResourceRepo) GetUserByMobile(ctx context.Context, mobile string) (store.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByMobile", ctx, mobile)
	ret0, _ := ret[0].(store.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUserByMobile indicates an expected call of GetUserByMobile.
func (mr *MockResourceRepoMockRecorder) GetUserByMobile(ctx, mobile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByMobile", reflect.TypeOf((*MockResourceRepo)(nil).GetUserByMobile), ctx, mobile)
}

// RegisterUser mocks base method.
func (m *MockResourceRepo) RegisterUser(ctx context.Context, user store.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockResourceRepoMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockResourceRepo)(nil).RegisterUser), ctx, user)
}

// UpdateLoan mocks base method.
func (m *MockResourceRepo) UpdateLoan(ctx context.Context, loanID store.Loan) (store.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", ctx, loanID)
	ret0, _ := ret[0].(store.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockResourceRepoMockRecorder) UpdateLoan(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockResourceRepo)(nil).UpdateLoan), ctx, loanID)
}
